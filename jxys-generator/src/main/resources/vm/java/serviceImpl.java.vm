package ${packageName}.service.impl;

import com.jxys.common.utils.StringUtils;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.jxys.system.mapper.SysUserMapper;
import javax.annotation.Resource;
import java.util.stream.Collectors;
import java.util.List;
    #foreach ($column in $columns)
        #if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
        import com.jxys.common.utils.DateUtils;
            #break
        #end
    #end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
    #if($table.sub)
    import java.util.ArrayList;
    import com.jxys.common.utils.StringUtils;
    import org.springframework.transaction.annotation.Transactional;
    import ${packageName}.domain.${subClassName};
    #end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements ${ClassName}Service {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;
    @Resource
    private SysUserMapper sysUserMapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.selectById(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}) {

        //查询参数
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper();
        queryWrapper.lambda().orderByDesc(${ClassName}::getCreateTime);

        #foreach($column in $columns)
            #set($queryType=$column.queryType)
            #set($javaField=$column.javaField)
            #set($javaType=$column.javaType)
            #set($columnName=$column.columnName)
            #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
            #if($column.query)
                #if($column.queryType == "EQ")
                    if(StringUtils.isNotNull(${className}.get$AttrName()) #if($javaType == 'String') &&StringUtils.isNotEmpty(${className}.get$AttrName()) #end){
                    queryWrapper.eq("$columnName", ${className}.get$AttrName());

                }
                #elseif($queryType == "NE")
                    if(StringUtils.isNotNull(${className}.get$AttrName()) #if($javaType == 'String') &&StringUtils.isNotEmpty(${className}.get$AttrName()) #end){
                    queryWrapper.ne("$columnName", ${className}.get$AttrName());
                }
                #elseif($queryType == "GT")
                    if(StringUtils.isNotNull(${className}.get$AttrName()) #if($javaType == 'String') &&StringUtils.isNotEmpty(${className}.get$AttrName()) #end){
                    queryWrapper.gt("$columnName", ${className}.get$AttrName());
                }
                #elseif($queryType == "GTE")
                    if(StringUtils.isNotNull(${className}.get$AttrName()) #if($javaType == 'String') &&StringUtils.isNotEmpty(${className}.get$AttrName()) #end){
                    queryWrapper.ge("$columnName", ${className}.get$AttrName());
                }
                #elseif($queryType == "LT")
                    if(StringUtils.isNotNull(${className}.get$AttrName()) #if($javaType == 'String') &&StringUtils.isNotEmpty(${className}.get$AttrName()) #end){
                    queryWrapper.lt("$columnName", ${className}.get$AttrName());
                }
                #elseif($queryType == "LTE")
                    if(StringUtils.isNotNull(${className}.get$AttrName()) #if($javaType == 'String') &&StringUtils.isNotEmpty(${className}.get$AttrName()) #end){
                    queryWrapper.le("$columnName", ${className}.get$AttrName());
                }
                #elseif($queryType == "LIKE")
                    if(StringUtils.isNotNull(${className}.get$AttrName()) #if($javaType == 'String') &&StringUtils.isNotEmpty(${className}.get$AttrName()) #end){
                    queryWrapper.like("$columnName", ${className}.get$AttrName());
                }
                #elseif($queryType == "BETWEEN")
                    if(StringUtils.isNotNull(${className}.getParams().get(begin$AttrName()))  && StringUtils.isNotNull(${className}.getParams().get(end$AttrName())) && StringUtils.isNotEmpty(${className}.getParams().get(begin$AttrName())) && StringUtils.isNotEmpty(${className}.getParams().get(end$AttrName()))   ){
                    queryWrapper.between("$columnName", ${className}.getParams().get(begin$AttrName()),${className}.getParams().get(end$AttrName()));
                }
                #end
            #end
        #end

        //查询数据
        List<${ClassName}> list=${className}Mapper.selectList(queryWrapper);
        //查询创建人和修改人
        list.stream().map(obj -> {
            obj.setCreateMc(this.sysUserMapper.selectNickUserByUserName(obj.getCreateBy()));
            obj.setUpdateMc(this.sysUserMapper.selectNickUserByUserName(obj.getUpdateBy()));
            return obj;
        }).collect(Collectors.toList());

        return list;
    }

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int insert${ClassName}(${ClassName} ${className}) {

        return ${className}Mapper.insert(${className});

    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int update${ClassName}(${ClassName} ${className}) {
        return ${className}Mapper.updateById(${className});
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s) {

        return ${className}Mapper.deleteBatchIds(java.util.Arrays.asList(${pkColumn.javaField}s));
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        #if($table.sub)
                ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
        #end
        return ${className}Mapper.deleteById(${pkColumn.javaField});
    }

}
